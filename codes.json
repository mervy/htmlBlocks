[
  {
    "id": 1,
    "title": "Exemplo de Classe em PHP 8.2",
    "code": "<?php\n\nclass Pessoa {\n  private string $nome;\n  private int $idade;\n\n  public function __construct(string $nome, int $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n\n  public function apresentar(): string {\n    return \"Olá, meu nome é {$this->nome} e eu tenho {$this->idade} anos.\";\n  }\n}\n\n$pessoa = new Pessoa(\"João\", 30);\necho $pessoa->apresentar();\n?>"
  },
  {
    "id": 2,
    "title": "Exemplo de Namespace em PHP 8.2",
    "code": "<?php\n\nnamespace App\\Controllers;\n\nclass HomeController {\n  public function index() {\n    echo \"Hello World!\";\n  }\n}\n\n$homeController = new HomeController();\n$homeController->index();\n?>"
  },
  {
    "id": 3,
    "title": "Exemplo de Traits em PHP 8.2",
    "code": "<?php\n\ntrait Log {\n  public function log(string $mensagem): void {\n    echo date(\"Y-m-d H:i:s\") . \" - {$mensagem}\\n\";\n  }\n}\n\nclass Usuario {\n  use Log;\n\n  private string $nome;\n\n  public function __construct(string $nome) {\n    $this->nome = $nome;\n  }\n\n  public function saudacao(): void {\n    $this->log(\"Olá, meu nome é {$this->nome}\");\n  }\n}\n\n$usuario = new Usuario(\"Maria\");\n$usuario->saudacao();\n?>"
  },
  {
    "id": 4,
    "title": "Uso do echo",
    "code": "<?php\n$nome = 'João';\necho 'Olá, ' . $nome;"
  },
  {
    "id": 5,
    "title": "Format number",
    "code": "<?php\n$preco = 19.99;\necho 'O preço é R$ ' . number_format($preco, 2, ',', '.');"
  },
  {
    "id": 6,
    "title": "Function sum",
    "code": "<?php\nfunction somar($a, $b) {\n  return $a + $b;\n}\n$resultado = somar(2, 3);\necho 'A soma é ' . $resultado;"
  },
  {
    "id": 7,
    "title": "Uso do foreach",
    "code": "<?php\n$alunos = [\n  'João' => 8,\n  'Maria' => 9,\n  'Pedro' => 7\n];\nforeach ($alunos as $nome => $nota) {\n  echo $nome . ': ' . $nota . '\\n';\n}"
  },
  {
    "id": 8,
    "title": "Foreach 2",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\narray_push($numeros, 13);\nforeach ($numeros as $numero) {\n  echo $numero . '\\n';\n}"
  },
  {
    "id": 9,
    "title": "Get the sum of two numbers",
    "code": "<?php\n\n/**\n * Get the sum of two numbers.\n *\n * @param int $a\n * @param int $b\n *\n * @return int\n */\nfunction add(int $a, int $b): int\n{\n    return $a + $b;\n}\n"
  },
  {
    "id": 10,
    "title": "Exemplo 2",
    "code": "<?php\n$preco = 19.99;\necho 'O preço é R$ ' . number_format($preco, 2, ',', '.');"
  },
  {
    "id": 11,
    "title": "Exemplo 3",
    "code": "<?php\nfunction somar($a, $b) {\n  return $a + $b;\n}\n$resultado = somar(2, 3);\necho 'A soma é ' . $resultado;"
  },
  {
    "id": 12,
    "title": "Exemplo 4",
    "code": "<?php\n$alunos = [\n  'João' => 8,\n  'Maria' => 9,\n  'Pedro' => 7\n];\nforeach ($alunos as $nome => $nota) {\n  echo $nome . ': ' . $nota . '\\n';\n}"
  },
  {
    "id": 13,
    "title": "Exemplo 5",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\narray_push($numeros, 13);\nforeach ($numeros as $numero) {\n  echo $numero . '\\n';\n}"
  },
  {
    "id": 14,
    "title": "Exemplo 6",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n$pessoa = new Pessoa('João', 30);\necho 'Nome: ' . $pessoa->getNome() . '\\n';\necho 'Idade: ' . $pessoa->getIdade();"
  },
  {
    "id": 15,
    "title": "Exemplo 7",
    "code": "<?php\n$frutas = [\n  'maçã',\n  'banana',\n  'laranja',\n  'abacaxi',\n  'uva'\n];\n$resultado = match ('banana') {\n  in_array('maçã', $frutas) => 'Tem maçã',\n  in_array('banana', $frutas) => 'Tem banana',\n  in_array('abacate', $frutas) => 'Tem abacate',\n  default => 'Não tem nada'\n};\necho $resultado;"
  },
  {
    "id": 16,
    "title": "Exemplo 8",
    "code": "<?php\n$nome = 'Maria';\necho 'Olá, ' . strtoupper($nome);"
  },
  {
    "id": 17,
    "title": "Fetch users from a database",
    "code": "<?php\n\ninterface UserRepositoryInterface\n{\n    public function findAll(): array;\n}\n\nclass UserRepository implements UserRepositoryInterface\n{\n    private PDO $pdo;\n\n    public function __construct(PDO $pdo)\n    {\n        $this->pdo = $pdo;\n    }\n\n    public function findAll(): array\n    {\n        $stmt = $this->pdo->query('SELECT * FROM users');\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n}\n\n$userRepository = new UserRepository(\nnew PDO('mysql:host=localhost;dbname=mydb', 'username', 'password'));\n$users = $userRepository->findAll();\n"
  },
  {
    "id": 18,
    "title": "Process a form submission",
    "code": "<?php\n\nclass FormHandler\n{\n    private FormValidator $validator;\n    private EmailSender $emailSender;\n    private UserRepositoryInterface $userRepository;\n\n    public function __construct(FormValidator $validator, EmailSender $emailSender, UserRepositoryInterface $userRepository)\n    {\n        $this->validator = $validator;\n        $this->emailSender = $emailSender;\n        $this->userRepository = $userRepository;\n    }\n\n    public function handleFormSubmission(array $formData)\n    {\n        if (!$this->validator->isValid($formData)) {\n            throw new InvalidArgumentException('Invalid form data');\n        }\n\n        $userId = $this->userRepository->createUser($formData);\n\n        $emailData = [/* ... */];\n        $this->emailSender->sendEmail($emailData);\n    }\n}\n\n$formData = $_POST;\n$validator = new FormValidator();\n$emailSender = new EmailSender(new SmtpClient());\n$userRepository = new UserRepository(new MysqlConnection());\n$formHandler = new FormHandler($validator, $emailSender, $userRepository);\n$formHandler->handleFormSubmission($formData);\n"
  },
  {
    "id": 19,
    "title": "Autoload classes with PSR-4",
    "code": "<?php\n\n// Define namespace and base directory mapping\nspl_autoload_register(function ($className) {\n    $namespace = 'MyApp\\';\n    $baseDir = __DIR__ . '/src/';\n    $len = strlen($namespace);\n    if (strncmp($namespace, $className, $len) !== 0) {\n        return;\n    }\n    $relativeClass = substr($className, $len);\n    $file = $baseDir . str_replace('\\', '/', $relativeClass) . '.php';\n    if (file_exists($file)) {\n        require $file;\n    }\n});\n\n// Use the classes\nuse MyApp\\MyClass;\n\n$obj = new MyClass();\n$obj->doSomething();\n"
  },
  {
    "id": 20,
    "title": "Exemplo 4",
    "code": "<?php\n$alunos = [\n  'João' => 8,\n  'Maria' => 9,\n  'Pedro' => 7\n];\nforeach ($alunos as $nome => $nota) {\n  echo $nome . ': ' . $nota . '\\n';\n}"
  },
  {
    "id": 21,
    "title": "Generate a random password",
    "code": "<?php\n\nfunction generateRandomPassword(int $length = 12): string\n{\n    $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $numChars = strlen($chars);\n    $password = '';\n    for ($i = 0; $i < $length; $i++) {\n        $index = random_int(0, $numChars - 1);\n        $password .= $chars[$index];\n    }\n    return $password;\n}\n\n$password = generateRandomPassword();\necho $password;\n"
  },
  {
    "id": 22,
    "title": "Exemplo 6",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n$pessoa = new Pessoa('João', 30);\necho 'Nome: ' . $pessoa->getNome() . '\\n';\necho 'Idade: ' . $pessoa->getIdade();"
  },
  {
    "id": 23,
    "title": "Exemplo 7",
    "code": "<?php\n$frutas = [\n  'maçã',\n  'banana',\n  'laranja',\n  'abacaxi',\n  'uva'\n];\n$resultado = match ('banana') {\n  in_array('maçã', $frutas) => 'Tem maçã',\n  in_array('banana', $frutas) => 'Tem banana',\n  in_array('abacate', $frutas) => 'Tem abacate',\n  default => 'Não tem nada'\n};\necho $resultado;"
  },
  {
    "id": 24,
    "title": "Send email notifications to users",
    "code": "<?php\n\ninterface NotificationInterface\n{\n    public function sendNotification(User $user, string $message): void;\n}\n\nclass EmailNotification implements NotificationInterface\n{\n    private EmailSender $emailSender;\n\n    public function __construct(EmailSender $emailSender)\n    {\n        $this->emailSender = $emailSender;\n    }\n\n    public function sendNotification(User $user, string $message): void\n    {\n        $emailData = [/* ... */];\n        $this->emailSender->sendEmail($emailData);\n    }\n}\n\nclass User\n{\n    private string $email;\n\n    public function __construct(string $email)\n    {\n        $this->email = $email;\n    }\n\n    public function getEmail(): string\n    {\n        return $this->email;\n    }\n}\n\nclass NotificationService\n{\n    private NotificationInterface $notification;\n\n    public function __construct(NotificationInterface $notification)\n    {\n        $this->notification = $notification;\n    }\n\n    public function notifyUser(User $user, string $message): void\n    {\n        $this->notification->sendNotification($user, $message);\n    }\n}\n\n$emailSender = new EmailSender(new SmtpEmailService());\n$emailNotification = new EmailNotification($emailSender);\n\n$user1 = new User('user1@example.com');\n$user2 = new User('user2@example.com');\n\n$notificationService = new NotificationService($emailNotification);\n$notificationService->notifyUser($user1, 'Welcome to our site!');\n$notificationService->notifyUser($user2, 'Check out our latest offers!');\n"
  },
  {
    "id": 25,
    "title": "Implement a shopping cart",
    "code": "<?php\n\nclass Product\n{\n private string $name;\n private float $price;\n\n public function __construct(string $name, float $price)\n {\n $this->name = $name;\n $this->price = $price;\n }\n\n public function getName(): string\n {\n return $this->name;\n }\n\n public function getPrice(): float\n {\n return $this->price;\n }\n}\n\nclass ShoppingCart\n{\n private array $items = [];\n\n public function addItem(Product $product, int $quantity = 1): void\n {\n if (array_key_exists($product->getName(), $this->items)) {\n $this->items[$product->getName()] += $quantity;\n } else {\n $this->items[$product->getName()] = $quantity;\n }\n }\n\n public function removeItem(Product $product, int $quantity = 1): void\n {\n if (array_key_exists($product->getName(), $this->items)) {\n if ($this->items[$product->getName()] <= $quantity) {\n unset($this->items[$product->getName()]);\n } else {\n $this->items[$product->getName()] -= $quantity;\n }\n }\n }\n\n public function getTotalPrice(): float\n {\n $total = 0;\n foreach ($this->items as $name => $quantity) {\n $product = new Product($name, /* ... */);\n $total += $product->getPrice() * $quantity;\n }\n return $total;\n }\n}\n\n$product1 = new Product('Product 1', 10.00);\n$product2 = new Product('Product 2', 20.00);\n\n$cart = new ShoppingCart();\n$cart->addItem($product1);\n$cart->addItem($product2, 2);\n$cart->removeItem($product1);\n\n$totalPrice = $cart->getTotalPrice();\n"
  },
  {
    "id": 26,
    "title": "Hello World",
    "code": "<?php\n\nclass HelloWorld {\n    private int $id;\n    private string $title;\n    private DateTime $created_at;\n\n    public function __construct(int $id, string $title, DateTime $created_at) {\n        $this->id = $id;\n        $this->title = $title;\n        $this->created_at = $created_at;\n    }\n\n    public function sayHello(): void {\n        echo \"Hello, World!\";\n    }\n}\n\n$helloWorld = new HelloWorld(1, \"Hello World\", new DateTime(\"2023-04-04 10:00:00\"));\n$helloWorld->sayHello();"
  },
  {
    "id": 27,
    "title": "User Authentication",
    "subject": "PHP Security",
    "created_at": "2023-04-04 11:30:00",
    "code": "<?php\n\nclass UserAuthenticator {\n    public function authenticateUser(string $username, string $password): bool {\n        // Authenticate user logic\n    }\n}\n\n$userAuth = new UserAuthenticator();\nif ($userAuth->authenticateUser('user1', 'password123')) {\n    echo \"User authenticated successfully\";\n} else {\n    echo \"Authentication failed\";\n}"
  },
  {
    "id": 28,
    "title": "Exemplo 4",
    "code": "<?php\n$alunos = [\n  'João' => 8,\n  'Maria' => 9,\n  'Pedro' => 7\n];\nforeach ($alunos as $nome => $nota) {\n  echo $nome . ': ' . $nota . '\\n';\n}"
  },
  {
    "id": 29,
    "title": "Simple Calculator",
    "code": "<?php\n\nclass Calculator {\n    public function add(int $a, int $b): int {\n        return $a + $b;\n    }\n    \n    public function subtract(int $a, int $b): int {\n        return $a - $b;\n    }\n    \n    public function multiply(int $a, int $b): int {\n        return $a * $b;\n    }\n    \n    public function divide(int $a, int $b): float {\n        if ($b === 0) {\n            throw new Exception(\"Division by zero\");\n        }\n        \n        return $a / $b;\n    }\n}\n\n$calc = new Calculator();\necho $calc->add(2, 3); // Output: 5\necho $calc->subtract(10, 5); // Output: 5\necho $calc->multiply(2, 4); // Output: 8\necho $calc->divide(10, 2); // Output: 5.0"
  },
  {
    "id": 30,
    "title": "Exemplo 6",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n$pessoa = new Pessoa('João', 30);\necho 'Nome: ' . $pessoa->getNome() . '\\n';\necho 'Idade: ' . $pessoa->getIdade();"
  },
  {
    "id": 31,
    "title": "Exemplo 7",
    "code": "<?php\n$frutas = [\n  'maçã',\n  'banana',\n  'laranja',\n  'abacaxi',\n  'uva'\n];\n$resultado = match ('banana') {\n  in_array('maçã', $frutas) => 'Tem maçã',\n  in_array('banana', $frutas) => 'Tem banana',\n  in_array('abacate', $frutas) => 'Tem abacate',\n  default => 'Não tem nada'\n};\necho $resultado;"
  },
  {
    "id": 32,
    "title": "File Uploader",
    "code": "<?php\n\nclass FileUploader {\n    private $allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];\n    private $maxFileSize = 1048576; // 1MB\n    \n    public function uploadFile(array $file): bool {\n        $fileName = $file['name'];\n        $fileTmpName = $file['tmp_name'];\n        $fileSize = $file['size'];\n        $fileError = $file['error'];\n        $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));\n        \n        if (!in_array($fileExtension, $this->allowedExtensions)) {\n            throw new Exception(\"File type not allowed\");\n        }\n        \n        if ($fileSize > $this->maxFileSize) {\n            throw new Exception(\"File size exceeded\");\n        }\n        \n        if ($fileError !== UPLOAD_ERR_OK) {\n            throw new Exception(\"File upload error\");\n        }\n        \n        // File upload logic\n        \n        return true;\n    }\n}\n\n$fileUploader = new FileUploader();\n$file = $_FILES['file'];\nif ($fileUploader->uploadFile($file)) {\n    echo \"File uploaded successfully\";\n} else {\n    echo \"File upload failed\";\n}"
  },
  {
    "id": 33,
    "title": "XML to JSON Converter",
    "code": "<?php\n\nclass XmlToJsonConverter {\n    public function convert(string $xml): string {\n        $xmlObj = simplexml_load_string($xml);\n        $json = json_encode($xmlObj);\n        \n        return $json;\n    }\n}\n\n$xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><person><name>John Doe</name><age>30</age></person>';\n$converter = new XmlToJsonConverter();\necho $converter->convert($xml);"
  },
  {
    "id": 34,
    "title": "Password Generator",
    "code": "<?php\n\nclass PasswordGenerator {\n    private $length = 8;\n    private $includeUppercase = true;\n    private $includeNumbers = true;\n    \n    public function generate(): string {\n        $password = '';\n        $chars = 'abcdefghijklmnopqrstuvwxyz';\n        $chars .= $this->includeUppercase ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' : '';\n        $chars .= $this->includeNumbers ? '0123456789' : '';\n        \n        $charCount = strlen($chars);\n        \n        for ($i = 0; $i < $this->length; $i++) {\n            $randomChar = $chars[rand(0, $charCount - 1)];\n            $password .= $randomChar;\n        }\n        \n        return $password;\n    }\n}\n\n$generator = new PasswordGenerator();\necho $generator->generate();\n"
  },
  {
    "id": 35,
    "title": "Exemplo 2",
    "code": "<?php\n$preco = 19.99;\necho 'O preço é R$ ' . number_format($preco, 2, ',', '.');"
  },
  {
    "id": 36,
    "title": "Exemplo 3",
    "code": "<?php\nfunction somar($a, $b) {\n  return $a + $b;\n}\n$resultado = somar(2, 3);\necho 'A soma é ' . $resultado;"
  },
  {
    "id": 37,
    "title": "Exemplo 4",
    "code": "<?php\n$alunos = [\n  'João' => 8,\n  'Maria' => 9,\n  'Pedro' => 7\n];\nforeach ($alunos as $nome => $nota) {\n  echo $nome . ': ' . $nota . '\\n';\n}"
  },
  {
    "id": 38,
    "title": "Exemplo 5",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\narray_push($numeros, 13);\nforeach ($numeros as $numero) {\n  echo $numero . '\\n';\n}"
  },
  {
    "id": 39,
    "title": "Exemplo 6",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n"
  },
  {
    "id": 40,
    "title": "Exemplo 21",
    "code": "<?php\nfunction contarVogais($texto) {\n  $vogais = ['a', 'e', 'i', 'o', 'u'];\n  $contador = 0;\n  for ($i = 0; $i < strlen($texto); $i++) {\n    if (in_array(strtolower($texto[$i]), $vogais)) {\n      $contador++;\n    }\n  }\n  return $contador;\n}\necho contarVogais('Lorem ipsum dolor sit amet');"
  },
  {
    "id": 41,
    "title": "Exemplo 22",
    "code": "<?php\nclass Animal {\n  protected $nome;\n  protected $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function andar() {\n    echo $this->nome . ' andou.';\n  }\n}\n\nclass Cachorro extends Animal {\n  public function latir() {\n    echo $this->nome . ' latiu.';\n  }\n}\n\n$rex = new Cachorro('Rex', 2);\n$rex->andar();\n$rex->latir();"
  },
  {
    "id": 42,
    "title": "Exemplo 23",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\n$numerosAoQuadrado = array_map(function($numero) {\n  return $numero ** 2;\n}, $numeros);\nprint_r($numerosAoQuadrado);"
  },
  {
    "id": 43,
    "title": "Exemplo 24",
    "code": "<?php\nfunction fatorial($numero) {\n  if ($numero == 0) {\n    return 1;\n  } else {\n    return $numero * fatorial($numero - 1);\n  }\n}\necho fatorial(5);"
  },
  {
    "id": 44,
    "title": "Exemplo 25",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\n$numerosPares = array_filter($numeros, function($numero) {\n  return $numero % 2 == 0;\n});\nprint_r($numerosPares);"
  },
  {
    "id": 45,
    "title": "Exemplo 26",
    "code": "<?php\ninterface Pagavel {\n  public function pagar($valor);\n}\n\nclass Produto implements Pagavel {\n  private $nome;\n  private $preco;\n  public function __construct($nome, $preco) {\n    $this->nome = $nome;\n    $this->preco = $preco;\n  }\n  public function pagar($valor) {\n    if ($valor >= $this->preco) {\n      echo 'Produto ' . $this->nome . ' pago.';\n    } else {\n      echo 'Valor insuficiente para o produto ' . $this->nome;\n    }\n  }\n}\n\n"
  },
  {
    "id": 46,
    "title": "Exemplo 31",
    "code": "<?php\n$frase = 'Lorem ipsum dolor sit amet';\n$palavras = explode(' ', $frase);\nprint_r($palavras);"
  },
  {
    "id": 47,
    "title": "Exemplo 32",
    "code": "<?php\nabstract class Animal {\n  protected $nome;\n  protected $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  abstract public function andar();\n}\n\nclass Cachorro extends Animal {\n  public function andar() {\n    echo $this->nome . ' andou.';\n  }\n}\n\nclass Gato extends Animal {\n  public function andar() {\n    echo $this->nome . ' andou silenciosamente.';\n  }\n}\n\n$rex = new Cachorro('Rex', 2);\n$rex->andar();\n$mimi = new Gato('Mimi', 1);\n$mimi->andar();"
  },
  {
    "id": 48,
    "title": "Exemplo 33",
    "code": "<?php\n$numeros = [2, 3, 5, 7, 11];\n$numerosSoma = array_reduce($numeros, function($acumulado, $numero) {\n  return $acumulado + $numero;\n});\necho $numerosSoma;"
  },
  {
    "id": 49,
    "title": "Exemplo 34",
    "code": "<?php\nfunction inverteTexto($texto) {\n  $textoInvertido = '';\n  for ($i = strlen($texto) - 1; $i >= 0; $i--) {\n    $textoInvertido .= $texto[$i];\n  }\n  return $textoInvertido;\n}\necho inverteTexto('Lorem ipsum');"
  },
  {
    "id": 50,
    "title": "Exemplo 35",
    "code": "<?php\nclass Produto {\n  private $nome;\n  private $preco;\n  public function __construct($nome, $preco) {\n    $this->nome = $nome;\n    $this->preco = $preco;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function setNome($nome) {\n    $this->nome = $nome;\n  }\n  public function getPreco() {\n    return $this->preco;\n  }\n  public function setPreco($preco) {\n    $this->preco = $preco;\n  }\n}\n\nclass Carrinho {\n  private $produtos = [];\n  public function adicionarProduto(Produto $produto) {\n    $this->produtos[] = $produto;\n  }\n  public function calcularTotal() {\n    $total = 0;\n    foreach ($this->produtos as $produto) {\n      $total += $produto->getPreco();\n    }\n    return $total;\n  }\n}\n\n$produto1 = new Produto('Camisa"
  },
  {
    "id": 51,
    "title": "Exemplo 35",
    "code": "<?php\nclass Produto {\n  private $nome;\n  private $preco;\n  public function __construct($nome, $preco) {\n    $this->nome = $nome;\n    $this->preco = $preco;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function setNome($nome) {\n    $this->nome = $nome;\n  }\n  public function getPreco() {\n    return $this->preco;\n  }\n  public function setPreco($preco) {\n    $this->preco = $preco;\n  }\n}\n\nclass Carrinho {\n  private $produtos = [];\n  public function adicionarProduto(Produto $produto) {\n    $this->produtos[] = $produto;\n  }\n  public function calcularTotal() {\n    $total = 0;\n    foreach ($this->produtos as $produto) {\n      $total += $produto->getPreco();\n    }\n    return $total;\n  }\n}\n\n$produto1 = new Produto('Camisa', 50);\n$produto2 = new Produto('Calça', 80);\n$carrinho = new Carrinho();\n$carrinho->adicionarProduto($produto1);\n$carrinho->adicionarProduto($produto2);\necho $carrinho->calcularTotal();"
  },
  {
    "id": 52,
    "title": "Exemplo 36",
    "code": "<?php\n$array1 = ['a', 'b', 'c'];\n$array2 = [1, 2, 3];\n$arrayFinal = array_combine($array1, $array2);\nprint_r($arrayFinal);"
  },
  {
    "id": 53,
    "title": "Exemplo 37",
    "code": "<?php\nfunction calculaAreaRetangulo($base, $altura) {\n  return $base * $altura;\n}\necho calculaAreaRetangulo(10, 5);"
  },
  {
    "id": 54,
    "title": "Exemplo 38",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n\n$pessoa = new Pessoa('João', 25);\necho 'O nome da pessoa é ' . $pessoa->getNome() . ' e a idade é ' . $pessoa->getIdade() . '.';"
  },
  {
    "id": 55,
    "title": "Exemplo 39",
    "code": "<?php\nfunction ordenaArray($array) {\n  sort($array);\n  return $array;\n}\n\n$arrayDesordenado = [4, 2, 5, 1, 3];\n$arrayOrdenado = ordenaArray($arrayDesordenado);\nprint_r($arrayOrdenado);"
  },
  {
    "id": 56,
    "title": "Exemplo 35",
    "code": "<?php\nclass Produto {\n  private $nome;\n  private $preco;\n  public function __construct($nome, $preco) {\n    $this->nome = $nome;\n    $this->preco = $preco;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function setNome($nome) {\n    $this->nome = $nome;\n  }\n  public function getPreco() {\n    return $this->preco;\n  }\n  public function setPreco($preco) {\n    $this->preco = $preco;\n  }\n}\n\nclass Carrinho {\n  private $produtos = [];\n  public function adicionarProduto(Produto $produto) {\n    $this->produtos[] = $produto;\n  }\n  public function calcularTotal() {\n    $total = 0;\n    foreach ($this->produtos as $produto) {\n      $total += $produto->getPreco();\n    }\n    return $total;\n  }\n}\n\n$produto1 = new Produto('Camisa', 50);\n$produto2 = new Produto('Calça', 80);\n$carrinho = new Carrinho();\n$carrinho->adicionarProduto($produto1);\n$carrinho->adicionarProduto($produto2);\necho $carrinho->calcularTotal();"
  },
  {
    "id": 57,
    "title": "Exemplo 36",
    "code": "<?php\n$array1 = ['a', 'b', 'c'];\n$array2 = [1, 2, 3];\n$arrayFinal = array_combine($array1, $array2);\nprint_r($arrayFinal);"
  },
  {
    "id": 58,
    "title": "Exemplo 37",
    "code": "<?php\nfunction calculaAreaRetangulo($base, $altura) {\n  return $base * $altura;\n}\necho calculaAreaRetangulo(10, 5);"
  },
  {
    "id": 59,
    "title": "Exemplo 38",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n\n$pessoa = new Pessoa('João', 25);\necho 'O nome da pessoa é ' . $pessoa->getNome() . ' e a idade é ' . $pessoa->getIdade() . '.';"
  },
  {
    "id": 60,
    "title": "Exemplo 39",
    "code": "<?php\nfunction ordenaArray($array) {\n  sort($array);\n  return $array;\n}\n\n$arrayDesordenado = [4, 2, 5, 1, 3];\n$arrayOrdenado = ordenaArray($arrayDesordenado);\nprint_r($arrayOrdenado);"
  },
  {
    "id": 61,
    "title": "Exemplo 55",
    "code": "<?php\ninterface Frete {\n  public function calcularFrete();\n}\n\nclass FreteSedex implements Frete {\n  public function calcularFrete() {\n    return 10.0;\n  }\n}\n\nclass FretePac implements Frete {\n  public function calcularFrete() {\n    return 5.0;\n  }\n}\n\nclass Pedido {\n  private $valorTotal;\n  private $frete;\n  public function __construct($valorTotal, Frete $frete) {\n    $this->valorTotal = $valorTotal;\n    $this->frete = $frete;\n  }\n  public function calcularTotal() {\n    return $this->valorTotal + $this->frete->calcularFrete();\n  }\n}\n\n$frete = new FretePac();\n$pedido = new Pedido(100, $frete);\necho $pedido->calcularTotal();"
  },
  {
    "id": 62,
    "title": "Exemplo 56",
    "code": "<?php\nfunction invertePalavras($frase) {\n  $palavras = explode(' ', $frase);\n  $palavrasInvertidas = [];\n  foreach ($palavras as $palavra) {\n    $palavraInvertida = strrev($palavra);\n    $palavrasInvertidas[] = $palavraInvertida;\n  }\n  $fraseInvertida = implode(' ', $palavrasInvertidas);\n  return $fraseInvertida;\n}\necho invertePalavras('O rato roeu a roupa do rei de Roma.');"
  },
  {
    "id": 63,
    "title": "Exemplo 57",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n\nclass PessoaFisica extends Pessoa {\n  private $cpf;\n  public function __construct($nome, $idade, $cpf) {\n    parent::__construct($nome, $idade);\n    $this->cpf = $cpf;\n  }\n  public function getCpf() {\n    return $this->cpf;\n  }\n}\n\n$pessoaFisica = new PessoaFisica('João', 25, '123.456.789-10');\necho 'O nome da pessoa é ' . $pessoaFisica->getNome() . ', a idade é ' . $pessoaFisica->getIdade() . ' e o CPF é ' . $pessoaFisica->getCpf() . '.';"
  },
  {
    "id": 64,
    "title": "Exemplo 58",
    "code": "<?php\nfunction contaPalavras($texto) {\n  $palavras = str_word_count($texto);\n  return $palavras;\n}\n\necho contaPalavras('O rato roeu a"
  },
  {
    "id": 65,
    "title": "Exemplo 55",
    "code": "<?php\ninterface Frete {\n  public function calcularFrete();\n}\n\nclass FreteSedex implements Frete {\n  public function calcularFrete() {\n    return 10.0;\n  }\n}\n\nclass FretePac implements Frete {\n  public function calcularFrete() {\n    return 5.0;\n  }\n}\n\nclass Pedido {\n  private $valorTotal;\n  private $frete;\n  public function __construct($valorTotal, Frete $frete) {\n    $this->valorTotal = $valorTotal;\n    $this->frete = $frete;\n  }\n  public function calcularTotal() {\n    return $this->valorTotal + $this->frete->calcularFrete();\n  }\n}\n\n$frete = new FretePac();\n$pedido = new Pedido(100, $frete);\necho $pedido->calcularTotal();"
  },
  {
    "id": 66,
    "title": "Exemplo 56",
    "code": "<?php\nfunction invertePalavras($frase) {\n  $palavras = explode(' ', $frase);\n  $palavrasInvertidas = [];\n  foreach ($palavras as $palavra) {\n    $palavraInvertida = strrev($palavra);\n    $palavrasInvertidas[] = $palavraInvertida;\n  }\n  $fraseInvertida = implode(' ', $palavrasInvertidas);\n  return $fraseInvertida;\n}\necho invertePalavras('O rato roeu a roupa do rei de Roma.');"
  },
  {
    "id": 67,
    "title": "Exemplo 57",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n\nclass PessoaFisica extends Pessoa {\n  private $cpf;\n  public function __construct($nome, $idade, $cpf) {\n    parent::__construct($nome, $idade);\n    $this->cpf = $cpf;\n  }\n  public function getCpf() {\n    return $this->cpf;\n  }\n}\n\n$pessoaFisica = new PessoaFisica('João', 25, '123.456.789-10');\necho 'O nome da pessoa é ' . $pessoaFisica->getNome() . ', a idade é ' . $pessoaFisica->getIdade() . ' e o CPF é ' . $pessoaFisica->getCpf() . '.';"
  },
  {
    "id": 68,
    "title": "User Repository",
    "code": "<?php\n\nnamespace MyApp\\Repositories;\n\ndeclare(strict_types=1);\n\nuse MyApp\\Database\\DatabaseInterface;\n\nclass UserRepository {\n    private $db;\n\n    public function __construct(DatabaseInterface $db) {\n        $this->db = $db;\n    }\n\n    public function getUserById(int $id): array {\n        return $this->db->query('SELECT * FROM users WHERE id = ?', [$id]);\n    }\n}\n"
  },
  {
    "id": 69,
    "title": "Exemplo 100",
    "code": "<?php\ninterface Produto {\n  public function getPreco();\n}\n\nclass Camisa implements Produto {\n  private $preco;\n  public function __construct($preco) {\n    $this->preco = $preco;\n  }\n  public function getPreco() {\n    return $this->preco;\n  }\n}\n\nclass Calca implements Produto {\n  private $preco;\n  public function __construct($preco) {\n    $this->preco = $preco;\n  }\n  public function getPreco() {\n    return $this->preco;\n  }\n}\n\nclass Carrinho {\n  private $produtos = [];\n  public function adicionarProduto(Produto $produto) {\n    $this->produtos[] = $produto;\n  }\n  public function calcularTotal() {\n    $total = 0.0;\n    foreach ($this->produtos as $produto) {\n      $total += $produto->getPreco();\n    }\n    return $total;\n  }\n}\n\n$camisa = new Camisa(29.99);\n$calca = new Calca(59.99);\n$carrinho = new Carrinho();\n$carrinho->adicionarProduto($camisa);\n$carrinho->adicionarProduto($calca);\necho $carrinho->calcularTotal();"
  },
  {
    "id": 70,
    "title": "Exemplo 101",
    "code": "<?php\nfunction contarLetras($texto, $letra) {\n  $letras = str_split($texto);\n  $contagem = 0;\n  foreach ($letras as $l) {\n    if ($l == $letra) {\n      $contagem++;\n    }\n  }\n  return $contagem;\n}\n\necho contarLetras('O rato roeu a roupa do rei de Roma.', 'r');"
  },
  {
    "id": 71,
    "title": "Exemplo 102",
    "code": "<?php\nabstract class Pessoa {\n  protected $nome;\n  protected $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  abstract public function getDocumento();\n}\n\nclass PessoaFisica extends Pessoa {\n  private $cpf;\n  public function __construct($nome, $idade, $cpf) {\n    parent::__construct($nome, $idade);\n    $this->cpf = $cpf;\n  }\n  public function getDocumento() {\n    return $this->cpf;\n  }\n}\n\nclass PessoaJuridica extends Pessoa {\n  private $cnpj;\n  public function __construct($nome, $idade, $cnpj) {\n    parent::__construct($nome, $idade);\n    $this->cnpj = $cnpj;\n  }\n  public function getDocumento() {\n    return $this->cnpj;\n  }\n}\n\n$pessoaFisica = new PessoaFisica('João', 25, '123.456.789-10');\necho 'O nome da"
  },
  {
    "id": 72,
    "title": "Exemplo 55",
    "code": "<?php\ninterface Frete {\n  public function calcularFrete();\n}\n\nclass FreteSedex implements Frete {\n  public function calcularFrete() {\n    return 10.0;\n  }\n}\n\nclass FretePac implements Frete {\n  public function calcularFrete() {\n    return 5.0;\n  }\n}\n\nclass Pedido {\n  private $valorTotal;\n  private $frete;\n  public function __construct($valorTotal, Frete $frete) {\n    $this->valorTotal = $valorTotal;\n    $this->frete = $frete;\n  }\n  public function calcularTotal() {\n    return $this->valorTotal + $this->frete->calcularFrete();\n  }\n}\n\n$frete = new FretePac();\n$pedido = new Pedido(100, $frete);\necho $pedido->calcularTotal();"
  },
  {
    "id": 73,
    "title": "Exemplo 56",
    "code": "<?php\nfunction invertePalavras($frase) {\n  $palavras = explode(' ', $frase);\n  $palavrasInvertidas = [];\n  foreach ($palavras as $palavra) {\n    $palavraInvertida = strrev($palavra);\n    $palavrasInvertidas[] = $palavraInvertida;\n  }\n  $fraseInvertida = implode(' ', $palavrasInvertidas);\n  return $fraseInvertida;\n}\necho invertePalavras('O rato roeu a roupa do rei de Roma.');"
  },
  {
    "id": 74,
    "title": "Exemplo 57",
    "code": "<?php\nclass Pessoa {\n  private $nome;\n  private $idade;\n  public function __construct($nome, $idade) {\n    $this->nome = $nome;\n    $this->idade = $idade;\n  }\n  public function getNome() {\n    return $this->nome;\n  }\n  public function getIdade() {\n    return $this->idade;\n  }\n}\n\nclass PessoaFisica extends Pessoa {\n  private $cpf;\n  public function __construct($nome, $idade, $cpf) {\n    parent::__construct($nome, $idade);\n    $this->cpf = $cpf;\n  }\n  public function getCpf() {\n    return $this->cpf;\n  }\n}\n\n$pessoaFisica = new PessoaFisica('João', 25, '123.456.789-10');\necho 'O nome da pessoa é ' . $pessoaFisica->getNome() . ', a idade é ' . $pessoaFisica->getIdade() . ' e o CPF é ' . $pessoaFisica->getCpf() . '.';"
  },
  {
    "id": 75,
    "title": "Invoice Calculator",
    "code": "<?php\n\ndeclare(strict_types=1);\n\ninterface InvoiceCalculatorInterface {\n    public function calculate(float $subtotal): float;\n}\n\nclass StandardInvoiceCalculator implements InvoiceCalculatorInterface {\n    private const TAX_RATE = 0.08;\n\n    public function calculate(float $subtotal): float {\n        return $subtotal * (1 + self::TAX_RATE);\n    }\n}\n\nclass VIPInvoiceCalculator implements InvoiceCalculatorInterface {\n    private const TAX_RATE = 0.05;\n    private const DISCOUNT_RATE = 0.1;\n\n    public function calculate(float $subtotal): float {\n        $total = $subtotal * (1 + self::TAX_RATE);\n        $total *= (1 - self::DISCOUNT_RATE);\n        return $total;\n    }\n}\n"
  },
  {
    "id": 76,
    "title": "Manipulação de Arquivos",
    "code": "<?php\n$file = 'arquivo.txt';\n$content = 'Conteúdo do arquivo.';\n\n// Escrevendo no arquivo\nfile_put_contents($file, $content);\n\n// Lendo o arquivo\n$data = file_get_contents($file);\necho $data;\n\n// Verificando se o arquivo existe\nif (file_exists($file)) {\n  echo 'O arquivo existe.';\n}\n\n// Deletando o arquivo\nunlink($file);"
  },
  {
    "id": 77,
    "title": "Ordenação de Arrays",
    "code": "<?php\n$frutas = ['maçã', 'banana', 'laranja', 'uva'];\n\n// Ordenando em ordem alfabética\nsort($frutas);\nprint_r($frutas);\n\n// Ordenando em ordem inversa\nrsort($frutas);\nprint_r($frutas);\n\n// Ordenando por chave\nksort($frutas);\nprint_r($frutas);\n\n// Ordenando por valor\nasort($frutas);\nprint_r($frutas);"
  },
  {
    "id": 78,
    "title": "Manipulação de Imagens",
    "code": "<?php\n// Carregando a imagem\n$image = imagecreatefromjpeg('imagem.jpg');\n\n// Obtendo as dimensões da imagem\n$width = imagesx($image);\n$height = imagesy($image);\n\n// Criando uma nova imagem com o dobro da largura\n$newWidth = $width * 2;\n$newHeight = $height;\n$newImage = imagecreatetruecolor($newWidth, $newHeight);\n\n// Copiando a imagem original para a nova imagem\nimagecopy($newImage, $image, 0, 0, 0, 0, $width, $height);\nimagecopy($newImage, $image, $width, 0, 0, 0, $width, $height);\n\n// Salvando a nova imagem\nimagejpeg($newImage, 'nova_imagem.jpg', 100);"
  },
  {
    "id": 79,
    "title": "Uso de Exceptions",
    "code": "<?php\nclass MinhaException extends Exception {}\n\nclass MinhaClasse {\n  public function fazerAlgo() {\n    throw new MinhaException('Ocorreu um erro.');\n  }\n}\n\n$obj = new MinhaClasse();\n\ntry {\n  $obj->fazerAlgo();\n} catch (MinhaException $e) {\n  echo 'Exceção capturada: ' . $e->getMessage();\n}"
  },
  {
    "id": 80,
    "title": "Uso de Namespaces",
    "code": "<?php\nnamespace App;\n\nclass MinhaClasse {}\n\n$obj = new MinhaClasse();\n\n// Outra classe em um namespace diferente\nnamespace OutroNamespace;\n\nclass OutraClasse {}\n\n$obj2 = new OutraClasse();"
  },
  {
    "id": 81,
    "title": "Uso de Traits",
    "code": "<?php\ntrait MeuTrait {\n  public function fazerAlgo() {\n    echo 'Fazendo algo...';\""
  },
  {
    "id": 82,
    "title": "Uso de Interfaces",
    "code": "<?php\ninterface MinhaInterface {\n  public function fazerAlgo();\n}\n\nclass MinhaClasse implements MinhaInterface {\n  public function fazerAlgo() {\n    echo 'Fazendo algo...';\n  }\n}\n\n$obj = new MinhaClasse();\n$obj->fazerAlgo();"
  },
  {
    "id": 83,
    "title": "Uso de Traits em Interfaces",
    "code": "<?php\ninterface MinhaInterface {\n  use MeuTrait;\n}\n\nclass MinhaClasse implements MinhaInterface {}\n\n$obj = new MinhaClasse();\n$obj->fazerAlgo();"
  },
  {
    "id": 84,
    "title": "Manipulação de Datas",
    "code": "<?php\n$date = new DateTime();\necho $date->format('Y-m-d H:i:s');\n\necho $date->modify('+1 day')->format('Y-m-d H:i:s');\n\n$date2 = new DateTime('2023-04-03');\necho $date->diff($date2)->format('%R%a days');"
  },
  {
    "id": 85,
    "title": "Uso de Traits para Mixins",
    "code": "<?php\ntrait MeuTrait {\n  public function fazerAlgo() {\n    echo 'Fazendo algo...';\n  }\n}\n\n// Classe com Mixin\nabstract class MinhaClasse {\n  use MeuTrait;\n}\n\nclass MinhaSubClasse extends MinhaClasse {}\n\n$obj = new MinhaSubClasse();\n$obj->fazerAlgo();"
  },
  {
    "id": 86,
    "title": "Uso de Métodos Mágicos",
    "code": "<?php\nclass MinhaClasse {\n  private $propriedade;\n\n  public function __construct() {\n    $this->propriedade = 42;\n  }\n\n  public function __get($name) {\n    if ($name === 'propriedade') {\n      return $this->propriedade;\n    }\n\n    throw new Exception('Propriedade não encontrada.');\n  }\n}\n\n$obj = new MinhaClasse();\necho $obj->propriedade;"
  },
  {
    "id": 87,
    "title": "Uso de Traits para Herança Múltipla",
    "code": "<?php\ntrait MeuTrait1 {\n  public function fazerAlgo() {\n    echo 'Fazendo algo 1...';\n  }\n}\n\ntrait MeuTrait2 {\n  public function fazerAlgo() {\n    echo 'Fazendo algo 2...';\n  }\n}\n\n// Classe com herança múltipla\nabstract class MinhaClasse {\n  use MeuTrait1, MeuTrait2 {\n    MeuTrait1::fazerAlgo insteadof MeuTrait2;\n    MeuTrait2::fazerAlgo as fazerAlgo2;\n  }\n}\n\nclass MinhaSubClasse extends MinhaClasse {}\n\n$obj = new MinhaSubClasse();\n$obj->fazerAlgo();\""
  },
  {
    "id": 88,
    "title": "Uso de Exceptions",
    "code": "<?php\nfunction dividir($a, $b) {\n  if ($b == 0) {\n    throw new Exception('Divisão por zero.');\n  }\n\n  return $a / $b;\n}\n\ntry {\n  $resultado = dividir(10, 0);\n  echo $resultado;\n} catch (Exception $e) {\n  echo 'Erro: ' . $e->getMessage();\n}"
  },
  {
    "id": 89,
    "title": "Uso de Traits para Adicionar Métodos Estáticos",
    "code": "<?php\ntrait MeuTrait {\n  public static function fazerAlgo() {\n    echo 'Fazendo algo...';\n  }\n}\n\nclass MinhaClasse {\n  use MeuTrait;\n}\n\nMinhaClasse::fazerAlgo();"
  },
  {
    "id": 90,
    "title": "Uso de Traits para Adicionar Propriedades",
    "code": "<?php\ntrait MeuTrait {\n  public $propriedade = 42;\n}\n\nclass MinhaClasse {\n  use MeuTrait;\n}\n\n$obj = new MinhaClasse();\necho $obj->propriedade;"
  },
  {
    "id": 91,
    "title": "Uso de Namespaces",
    "code": "<?php\nnamespace MeuNamespace;\n\nclass MinhaClasse {}\n\n$obj = new MinhaClasse();\nvar_dump($obj);"
  },
  {
    "id": 92,
    "title": "Uso de Namespaces Aninhados",
    "code": "<?php\nnamespace MeuNamespace;\n\nclass MinhaClasse {}\n\nnamespace MeuNamespace\\SubNamespace;\n\nclass MinhaOutraClasse {}\n\n$obj1 = new MinhaClasse();\n$obj2 = new MinhaOutraClasse();\nvar_dump($obj1);\nvar_dump($obj2);"
  },
  {
    "id": 93,
    "title": "Uso de Interfaces com Métodos Estáticos",
    "code": "<?php\ninterface MinhaInterface {\n  public static function fazerAlgo();\n}\n\nclass MinhaClasse implements MinhaInterface {\n  public static function fazerAlgo() {\n    echo 'Fazendo algo...';\n  }\n}\n\nMinhaClasse::fazerAlgo();"
  },
  {
    "id": 94,
    "title": "Uso de Variáveis de Classe",
    "code": "<?php\nclass MinhaClasse {\n  public static $contador = 0;\n\n  public function __construct() {\n    self::$contador++;\n  }\n}\n\n$obj1 = new MinhaClasse();\n$obj2 = new MinhaClasse();\n\necho MinhaClasse::$contador;"
  },
  {
    "id": 95,
    "title": "Uso de Métodos de Classe",
    "code": "<?php\nclass MinhaClasse {\n  public static function fazerAlgo() {\n    echo 'Fazendo algo...';\n  }\n}\n\nMinhaClasse::fazerAlgo();"
  },
  {
    "id": 96,
    "title": "Uso de Métodos Finais",
    "code": "<?php\nclass MinhaClasse {\n  final public function meuMetodo() {\n    echo 'Este é o método final.';\n  }\n}\n\nclass MinhaClasseFilha extends MinhaClasse {\n  public function meuMetodo() {\n    echo 'Este é o método filho.';\n  }\n}\n\n$obj = new MinhaClasseFilha();\n$obj->meuMetodo();"
  },
  {
    "id": 97,
    "title": "Uso de Métodos Estáticos Finais",
    "code": "<?php\nclass MinhaClasse {\n  final public static function meuMetodo() {\n    echo 'Este é o método final.';\n  }\n}\n\nclass MinhaClasseFilha extends MinhaClasse {\n  public static function meuMetodo() {\n    echo 'Este é o método filho.';\n  }\n}\n\nMinhaClasseFilha::meuMetodo();"
  },
  {
    "id": 98,
    "title": "Uso de Métodos Abstratos",
    "code": "<?php\nabstract class MinhaClasse {\n  abstract public function meuMetodo();\n}\n\nclass MinhaClasseFilha extends MinhaClasse {\n  public function meuMetodo() {\n    echo 'Este é o método filho.';\n  }\n}\n\n$obj = new MinhaClasseFilha();\n$obj->meuMetodo();"
  },
  {
    "id": 99,
    "title": "Uso de Atributos de Classe",
    "code": "<?php\nclass MinhaClasse {\n  #[Attribute]\n  public static $atributo = 'Valor do atributo.';\n}\n\necho MinhaClasse::$atributo;"
  },
  {
    "id": 100,
    "title": "Uso de Argumentos de Atributos",
    "code": "<?php\n#[Attribute(Attribute::TARGET_CLASS)]\nclass MeuAtributo {\n  public $valor;\n\n  public function __construct($valor) {\n    $this->valor = $valor;\n  }\n}\n\n#[MeuAtributo('Valor do atributo.')]\nclass MinhaClasse {}\n\n$obj = new MinhaClasse();\nvar_dump($obj);"
  },
  {
    "id": 101,
    "title": "Uso de Constantes de Classe",
    "code": "<?php\nclass MinhaClasse {\n  const MINHA_CONSTANTE = 'Valor da constante.';\n}\n\necho MinhaClasse::MINHA_CONSTANTE;"
  },
  {
    "id": 102,
    "title": "Uso de Sobrecarga de Operadores",
    "code": "<?php\nclass MinhaClasse {\n  public $valor;\n\n  public function __construct($valor) {\n    $this->valor = $valor;\n  }\n\n  public function __toString() {\n    return (string) $this->valor;\n  }\n}\n\n$obj = new MinhaClasse(42);\necho $obj;"
  },
  {
    "id": 103,
    "title": "Payment Processor",
    "code": "<?php\n\nnamespace MyApp\\Payment;\n\ndeclare(strict_types=1);\n\nuse MyApp\\Payment\\Gateways\\GatewayInterface;\n\nabstract class PaymentProcessor {\n protected $gateway;\n\n public function __construct(GatewayInterface $gateway) {\n $this->gateway = $gateway;\n }\n\n abstract protected function getAmount(): float;\n abstract protected function getDescription(): string;\n\n public function process(): bool {\n return $this->gateway->charge($this->getAmount(), $this->getDescription());\n }\n}\n\nclass CreditCardPaymentProcessor extends PaymentProcessor {\n private $amount;\n private $description;\n\n public function __construct(GatewayInterface $gateway, float $amount, string $description) {\n parent::__construct($gateway);\n $this->amount = $amount;\n $this->description = $description;\n }\n\n protected function getAmount(): float {\n return $this->amount;\n }\n\n protected function getDescription(): string {\n return $this->description;\n }\n}\n\ninterface GatewayInterface {\n public function charge(float $amount, string $description): bool;\n}\n\nclass StripeGateway implements GatewayInterface {\n public function charge(float $amount, string $description): bool {\n // Call Stripe API to charge the given amount\n return true;\n }\n}\n\n$gateway = new StripeGateway();\n$processor = new CreditCardPaymentProcessor($gateway, 100.00, 'Test payment');\n$processor->process();\n"
  },
  {
    "id": 104,
    "title": "PDO Database Connection",
    "code": "<?php\n\ntry {\n $pdo = new PDO('mysql:host=localhost;dbname=my_database', 'username', 'password');\n $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n echo 'Connected to database';\n} catch (PDOException $e) {\n echo 'Connection failed: ' . $e->getMessage();\n}"
  },
  {
    "id": 105,
    "title": "Image Processing with GD",
    "code": "<?php\n\n$filename = 'image.jpg';\nlist($width, $height) = getimagesize($filename);\n\n// Load the image into memory\n$image = imagecreatefromjpeg($filename);\n\n// Resize the image\n$thumbnail = imagecreatetruecolor(200, 200);\nimagecopyresampled($thumbnail, $image, 0, 0, 0, 0, 200, 200, $width, $height);\n\n// Save the thumbnail to disk\nimagejpeg($thumbnail, 'thumbnail.jpg');\n\n// Free up memory\nimagedestroy($image);\nimagedestroy($thumbnail);\n"
  },
  {
    "id": 106,
    "title": "Função para calcular o fatorial de um número",
    "code": "<?php\nfunction fatorial(int $num): int {\n    if ($num < 0) {\n        throw new InvalidArgumentException('Número negativo não possui fatorial');\n    }\n\n    $result = 1;\n    for ($i = 2; $i <= $num; $i++) {\n        $result *= $i;\n    }\n\n    return $result;\n}"
  },
  {
    "id": 107,
    "title": "Classe para manipulação de arquivos CSV",
    "code": "<?php\n\nclass CSV {\n    private string $filename;\n\n    public function __construct(string $filename) {\n        $this->filename = $filename;\n    }\n\n    public function read(): array {\n        $rows = [];\n        if (($handle = fopen($this->filename, 'r')) !== false) {\n            while (($data = fgetcsv($handle, 1000, ',')) !== false) {\n                $rows[] = $data;\n            }\n            fclose($handle);\n        }\n        return $rows;\n    }\n\n    public function write(array $rows): bool {\n        if (($handle = fopen($this->filename, 'w')) !== false) {\n            foreach ($rows as $row) {\n                fputcsv($handle, $row);\n            }\n            fclose($handle);\n            return true;\n        }\n        return false;\n    }\n}"
  },
  {
    "id": 108,
    "title": "Exemplo de uso de closures",
    "code": "<?php\n\nfunction makeAdder(int $x): Closure {\n    return function(int $y) use ($x) {\n        return $x + $y;\n    };\n}\n\n$add5 = makeAdder(5);\necho $add5(3); // output: 8"
  },
  {
    "id": 109,
    "title": "Exemplo de uso de traits",
    "code": "<?php\n\ntrait Loggable {\n    public function log(string $message): void {\n        echo date('Y-m-d H:i:s') . ' ' . $message . '\\n';\n    }\n}\n\nclass User {\n    use Loggable;\n    private string $name;\n\n    public function __construct(string $name) {\n        $this->name = $name;\n    }\n\n    public function greet(): void {\n        $this->log('Olá, meu nome é ' . $this->name);\n    }\n}\n\n$user = new User('João');\n$user->greet();"
  },
  {
    "id": 110,
    "title": "Exemplo de uso de expressões regulares para validação de email",
    "code": "<?php\n\nfunction validateEmail(string $email): bool {\n    return preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i', $email) === 1;\n}\n\nvar_dump(validateEmail('teste@teste.com')); // output: true\nvar_dump(validateEmail('teste.com')); // output: false"
  },
  {
    "id": 111,
    "title": "Exemplo de uso de Generators",
    "code": "<?php\n\nfunction fibonacci(int $max): Generator {\n    $a = 0;\n    $b = 1;\n    while ($a < $max) {\n        yield $a;\n        [$a, $b] = [$b, $a + $b];\n    }\n}\n\nforeach (fibonacci(100) as $num) {\n    echo $num . ' ';\n}"
  },
  {
    "id": 112,
    "title": "Exemplo de uso de Null Coalescing Operator",
    "code": "<?php\n\n$user = null;\n$name = $user['name'] ?? 'Anônimo';\necho $name; // output: Anônimo"
  },
  {
    "id": 113,
    "title": "Exemplo de uso de match expression",
    "code": "<?php\n\nfunction getDayName(int $dayOfWeek): string {\n    return match($dayOfWeek) {\n        0 => 'Domingo',\n        1 => 'Segunda',\n        2 => 'Terça',\n        3 => 'Quarta',\n        4 => 'Quinta',\n        5 => 'Sexta',\n        6 => 'Sábado',\n        default => 'Dia inválido',\n    };\n}\n\necho getDayName(3); // output: Quarta"
  },
  {
    "id": 114,
    "title": "Exemplo de uso de atributos",
    "code": "<?php\n\n#[Attribute]\nclass MyAttribute {\n    public function __construct(public string $value) {}\n}\n\n#[MyAttribute('hello')]\nclass MyClass {}\n\n$reflectionClass = new ReflectionClass(MyClass::class);\n$attribute = $reflectionClass->getAttributes(MyAttribute::class)[0]->newInstance();\necho $attribute->value; // output: hello"
  },
  {
    "id": 115,
    "title": "Exemplo de uso de argumentos nomeados",
    "code": "<?php\n\nfunction greet(string $name, string $language = 'pt'): string {\n    return match($language) {\n        'en' => 'Hello, ' . $name,\n        'es' => 'Hola, ' . $name,\n        'pt' => 'Olá, ' . $name,\n        default => 'Language not supported',\n    };\n}\n\necho greet(language: 'en', name: 'John'); // output: Hello, John"
  }
]